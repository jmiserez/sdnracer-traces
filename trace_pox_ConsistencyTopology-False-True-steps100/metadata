{
  "additional_metadata": null,
  "argv": [
    "./simulator.py",
    "-c",
    "config/trace_pox_l2_consistency.py"
  ],
  "cwd": "/home/ahassany/repos/jsts",
  "host": {
    "cpu_info": "Intel(R) Core(TM) i7-4870HQ CPU @ 2.50GHz",
    "free": "total       used       free     shared    buffers     cached\nMem:       4045244     240136    3805108       5664      19660     127104\n-/+ buffers/cache:      93372    3951872\nSwap:      4192252          0    4192252",
    "name": "stsdev",
    "num_cores": "2",
    "uptime": "14:24:25 up  3:23,  1 user,  load average: 0.30, 0.10, 0.07"
  },
  "modules": {
    "hassel": {
      "branch": "HEAD",
      "commit": "31afb29fa66783f5a66765bc186509b65ffc023e",
      "diff": "",
      "status": "HEAD detached at 31afb29\nnothing to commit, working directory clean"
    },
    "pox": {
      "branch": "hb",
      "commit": "a7a0bab1388a0ff4d1cd729fd395f10ae749af79",
      "diff": "diff --git a/pox/forwarding/consistency.py b/pox/forwarding/consistency.py\nindex d594886..24be0cb 100644\n--- a/pox/forwarding/consistency.py\n+++ b/pox/forwarding/consistency.py\n@@ -7,10 +7,15 @@ from pox.lib.addresses import EthAddr\n from pox.lib.addresses import IPAddr\n from pox.lib.recoco.recoco import Timer\n import time\n+from itertools import count\n+\n \n log = core.getLogger()\n \n \n+XID = count(1000)\n+\n+\n faculty = EthAddr(\"00:00:00:00:00:02\")\n student = EthAddr(\"00:00:00:00:00:03\")\n guest = EthAddr(\"00:00:00:00:00:04\")\n@@ -63,15 +68,28 @@ fs_ports[internet] = 2\n fs_ports[monitor] = 3\n \n \n+waiting_calls = {} #xid-> [list of function calls]\n+\n+\n+def get_barrier_msg():\n+  \"\"\"\n+  Generate a barrier request message\n+  \"\"\"\n+  barrier_msg = of.ofp_barrier_request()\n+  barrier_msg.xid = XID.next()\n+  log.info(\"Genrated barrier msg with xid: %d\", barrier_msg.xid)\n+  return barrier_msg\n+\n+\n class InternetSwitch(EventMixin):\n \n   def __init__ (self, connection):\n     self.connection = connection\n-\n+    self.dpid = internet\n+    self.log = core.getLogger(\"InternalSwitch\")\n+    self.log.debug(\"Initialized Internet Switch\")\n     # We want to hear PacketIn messages, so we listen\n     self.listenTo(connection)\n-    self.log = core.getLogger(\"InternalSwitch\")\n-    self.log.debug(\"Initializing Internet Switch\")\n \n   def install_internal(self):\n     \"\"\"Allow internal switches to talk to each others\"\"\"\n@@ -117,16 +135,25 @@ class InternetSwitch(EventMixin):\n     packet = event.parse()\n     self.log.info(\"Ignoring packet in at Internet Switch: %s\", str(packet))\n \n+  def _handle_BarrierIn(self, event):\n+    self.log.info(\"BARRIER REPLY: xid=%s\", event.xid)\n+    if event.xid not in waiting_calls:\n+      self.log.warn(\"BARRIER REPLY for unkown xid=%s, current: %s\", event.xid, waiting_calls.keys())\n+      return\n+    calls = waiting_calls[event.xid]\n+    del waiting_calls[event.xid]\n+    for call in calls:\n+      call()\n \n class InternalSwitch(EventMixin):\n \n   def __init__ (self, connection):\n     self.connection = connection\n-\n+    self.dpid = internal\n+    self.log = core.getLogger(self.__class__.__name__)\n     # We want to hear PacketIn messages, so we listen\n     self.listenTo(connection)\n-    self.log = core.getLogger(self.__class__.__name__)\n-    self.log.debug(\"Initializing Internal Switch\")\n+    self.log.debug(\"Initialized Internal Switch\")\n \n   def install_internal(self):\n     \"\"\"Allow internal switches to talk to each others\"\"\"\n@@ -170,11 +197,21 @@ class InternalSwitch(EventMixin):\n     packet = event.parse()\n     self.log.info(\"Ignoring packet in at Internal Switch: %s\", str(packet))\n \n+  def _handle_BarrierIn(self, event):\n+    self.log.info(\"BARRIER REPLY: xid=%s\", event.xid)\n+    if event.xid not in waiting_calls:\n+      self.log.warn(\"BARRIER REPLY for unkown xid=%s, current: %s\", event.xid, waiting_calls.keys())\n+      return\n+    calls = waiting_calls[event.xid]\n+    del waiting_calls[event.xid]\n+    for call in calls:\n+      call()\n \n class FSwitch(EventMixin):\n-  def __init__ (self, connection, deny=False):\n+  def __init__ (self, connection, dpid, deny=False):\n     self.connection = connection\n     self.deny = deny\n+    self.dpid = dpid\n     # We want to hear PacketIn messages, so we listen\n     self.listenTo(connection)\n \n@@ -187,6 +224,7 @@ class FSwitch(EventMixin):\n     self.connection.send(msg)\n \n   def deny_service(self, ip, priority=1000):\n+    self.log.info(\"Denying Service to src='%s'\", ip)\n     msg = of.ofp_flow_mod()\n     msg.match = of.ofp_match(dl_type=0x0800, nw_dst=ip)\n     msg.priority = priority\n@@ -223,12 +261,22 @@ class FSwitch(EventMixin):\n     self.connection.send(internal_msg)\n     self.connection.send(internet_msg)\n \n+  def _handle_BarrierIn(self, event):\n+    self.log.info(\"BARRIER REPLY: xid=%s\", event.xid)\n+    if event.xid not in waiting_calls:\n+      self.log.warn(\"BARRIER REPLY for unkown xid=%s, current: %s\", event.xid, waiting_calls.keys())\n+      return\n+    calls = waiting_calls[event.xid]\n+    del waiting_calls[event.xid]\n+    for call in calls:\n+      call()\n+\n \n class F1Switch(FSwitch):\n   def __init__ (self, connection, deny=False):\n-    super(F1Switch, self).__init__(connection, deny)\n+    super(F1Switch, self).__init__(connection, f1, deny)\n     self.log = core.getLogger(self.__class__.__name__)\n-    self.log.debug(\"Initializing F1 Switch\")\n+    self.log.debug(\"Initialized F1 Switch\")\n \n   def install_v1(self):\n     self.log.info(\"Installing v1\")\n@@ -251,9 +299,9 @@ class F1Switch(FSwitch):\n \n class F2Switch(FSwitch):\n   def __init__ (self, connection, deny=False):\n-    super(F2Switch, self).__init__(connection, deny)\n+    super(F2Switch, self).__init__(connection, f2, deny)\n     self.log = core.getLogger(self.__class__.__name__)\n-    self.log.debug(\"Initializing F2 Switch\")\n+    self.log.debug(\"Initialized F2 Switch\")\n \n   def install_v1(self):\n     self.log.info(\"Installing v2\")\n@@ -268,16 +316,15 @@ class F2Switch(FSwitch):\n     \"\"\"\n     Handles packet in messages from the switch to implement above algorithm.\n     \"\"\"\n-\n     packet = event.parse()\n     log.info(\"XXX Ignoring packet in at F2 Switch: %s\", str(packet))\n \n \n class F3Switch(FSwitch):\n   def __init__ (self, connection, deny=False):\n-    super(F3Switch, self).__init__(connection, deny)\n+    super(F3Switch, self).__init__(connection, f3, deny)\n     self.log = core.getLogger(\"F3Switch\")\n-    self.log.info(\"Initializing F3 Switch\")\n+    self.log.info(\"Initialized F3 Switch\")\n \n   def install_v1(self):\n     self.log.info(\"Installing v1\")\n@@ -298,11 +345,11 @@ class F3Switch(FSwitch):\n class MonitorSwitch(EventMixin):\n   def __init__ (self, connection):\n     self.connection = connection\n-\n+    self.dpid = monitor\n+    self.log = core.getLogger(self.__class__.__name__)\n     # We want to hear PacketIn messages, so we listen\n     self.listenTo(connection)\n-    self.log = core.getLogger(self.__class__.__name__)\n-    self.log.debug(\"Initializing MonitorSwitch Switch\")\n+    self.log.debug(\"Initialized MonitorSwitch Switch\")\n \n   def install_v1(self):\n     self.log.info(\"installing v1\")\n@@ -336,14 +383,23 @@ class MonitorSwitch(EventMixin):\n     packet = event.parse()\n     self.log.info(\"XXX Ignoring packet in at MonitorSwitch Switch: %s and port %d\", str(packet) , event.port)\n \n+  def _handle_BarrierIn(self, event):\n+    self.log.info(\"BARRIER REPLY: xid=%s\", event.xid)\n+    if event.xid not in waiting_calls:\n+      self.log.warn(\"BARRIER REPLY for unkown xid=%s, current: %s\", event.xid, waiting_calls.keys())\n+      return\n+    calls = waiting_calls[event.xid]\n+    del waiting_calls[event.xid]\n+    for call in calls:\n+      call()\n+\n \n class Main(EventMixin):\n   \"\"\"\n   Waits for OpenFlow switches to connect and makes them learning switches.\n   \"\"\"\n   def __init__ (self, consistent=True, update_wait=5, update_once=True,\n-                consistent_sleep=5, deny=False):\n-    self.listenTo(core.openflow)\n+                consistent_sleep=5, deny=False, use_barriers=True):\n     self.log = core.getLogger(\"Main\")\n     self.handlers = {}\n     self.consistent = consistent\n@@ -352,8 +408,39 @@ class Main(EventMixin):\n     self.consistent_sleep = consistent_sleep\n     self.deny = deny\n     self._all_connected = False\n+    self.use_barriers = use_barriers\n+    self.listenTo(core.openflow)\n \n-  def inconsistent_update(self):\n+  def slow_update_sleep(self):\n+    self.log.info(\"Sleeping to simulate slow update\")\n+    time.sleep(self.consistent_sleep)\n+    self.log.info(\"Just woke up from slow update\")\n+\n+  def incosnsitent_update_barriers(self):\n+    self.log.info(\"XXX Inconsistent Update with barriers\")\n+    # Prepare the update requests and the barriers\n+    redir_guest_to_f2 = lambda: self.handlers[internal].redirect_traffic(guest, internal_ports[f2])\n+    barr1 = get_barrier_msg()\n+    req_barr1 = lambda: self.handlers[internal].connection.send(barr1)\n+\n+    redir_student_to_f3 = lambda: self.handlers[internal].redirect_traffic(student, internal_ports[f3])\n+    barr2 = get_barrier_msg()\n+    req_barr2 = lambda: self.handlers[internal].connection.send(barr2)\n+    slow_update = lambda: self.slow_update_sleep()\n+\n+    monitor_on_f2 = lambda: self.handlers[f2].monitor_service(host_ips[service1])\n+    barr3 = get_barrier_msg()\n+    req_barr3 = lambda: self.handlers[f2].connection.send(barr3)\n+\n+    # Prepare the update sequence\n+    waiting_calls[barr1.xid] = [redir_student_to_f3, req_barr2, slow_update]\n+    waiting_calls[barr2.xid] = [monitor_on_f2, req_barr3]\n+\n+    # Start the update process\n+    redir_guest_to_f2()\n+    req_barr1()\n+\n+  def inconsistent_update_wait(self):\n     self.log.info(\"XXX Inconsistent Update\")\n     # 1- Redirect guest to F2\n     self.handlers[internal].redirect_traffic(guest, internal_ports[f2])\n@@ -365,7 +452,41 @@ class Main(EventMixin):\n     self.log.info(\"Just woke up from slow update\")\n     self.handlers[f2].monitor_service(host_ips[service1])\n \n-  def consistent_update(self):\n+  def consistent_update_barriers(self):\n+    self.log.info(\"XXX Consistent Update with barriers\")\n+    # Prepare the update requests and the barriers\n+\n+    # From the paper\n+    # 1- Update I to forward S traffic to F3, while continuing to\n+    #    forward U and G traffic to F1 and F traffic to F3.\n+    redir_student_to_f3 = lambda: self.handlers[internal].redirect_traffic(student, internal_ports[f3])\n+    barr1 = get_barrier_msg()\n+    req_barr1 = lambda: self.handlers[internal].connection.send(barr1)\n+\n+    # 2- Wait until in-flight packets have been processed by F2.\n+    wait_in_flight = lambda: self.slow_update_sleep()\n+\n+    # 3- Update F2 to deny SSH packets.\n+    monitor_on_f2 = lambda: self.handlers[f2].monitor_service(host_ips[service1])\n+    barr2 = get_barrier_msg()\n+    req_barr2 = lambda: self.handlers[f2].connection.send(barr2)\n+\n+    # 4- Update I to forward G traffic to F2, while continuing to\n+    #    forward U traffic to F1 and S and F traffic to F3.\n+\n+    redir_guest_to_f2 = lambda: self.handlers[internal].redirect_traffic(guest, internal_ports[f2])\n+    barr3 = get_barrier_msg()\n+    req_barr3 = lambda: self.handlers[internal].connection.send(barr3)\n+\n+    # Prepare the update sequence\n+    waiting_calls[barr1.xid] = [wait_in_flight, monitor_on_f2, req_barr2]\n+    waiting_calls[barr2.xid] = [redir_guest_to_f2, req_barr3]\n+\n+    # Start the update process\n+    redir_student_to_f3()\n+    req_barr1()\n+\n+  def consistent_update_wait(self):\n     self.log.info(\"XXX Consistent Update\")\n     # From the paper\n     # 1- Update I to forward S traffic to F3, while continuing to\n@@ -384,10 +505,19 @@ class Main(EventMixin):\n \n   def update_version(self):\n     self.log.info(\"XXX Update version triggered\")\n+    #self.incosnsitent_update_barriers()\n+    #return\n+\n     if self.consistent:\n-      self.consistent_update()\n+      if self.use_barriers:\n+        self.consistent_update_barriers()\n+      else:\n+        self.consistent_update_wait()\n     else:\n-      self.inconsistent_update()\n+      if self.use_barriers:\n+        self.incosnsitent_update_barriers()\n+      else:\n+        self.inconsistent_update_wait()\n \n   def _handle_ConnectionUp (self, event):\n     log.debug(\"Connection %s\", event.connection)\n@@ -430,7 +560,7 @@ class Main(EventMixin):\n \n \n def launch (consistent=True, update_wait=5, update_once=True,\n-            consistent_sleep=5, deny=False):\n+            consistent_sleep=5, deny=False, barriers=True):\n   \"\"\"\n   Starts an L2 learning switch.\n   \"\"\"\n@@ -438,5 +568,6 @@ def launch (consistent=True, update_wait=5, update_once=True,\n                    update_wait=int(update_wait),\n                    update_once=str_to_bool(update_once),\n                    consistent_sleep=int(consistent_sleep),\n-                   deny=str_to_bool(deny))\n+                   deny=str_to_bool(deny),\n+                   use_barriers=str_to_bool(barriers))",
      "status": "On branch hb\nYour branch is up-to-date with 'origin/hb'.\nChanges not staged for commit:\n  (use \"git add <file>...\" to update what will be committed)\n  (use \"git checkout -- <file>...\" to discard changes in working directory)\n\n\tmodified:   pox/forwarding/consistency.py\n\nUntracked files:\n  (use \"git add <file>...\" to include in what will be committed)\n\n\tpox/forwarding/l2_multi_new.py\n\nno changes added to commit (use \"git add\" and/or \"git commit -a\")"
    },
    "sts": {
      "branch": "hb",
      "commit": "f6a4c8edac6171c505b63ad7cdcebc8edd142507",
      "diff": "diff --git a/config/fuzzer_params.py b/config/fuzzer_params.py\nindex 1807a9a..e8b90ff 100644\n--- a/config/fuzzer_params.py\n+++ b/config/fuzzer_params.py\n@@ -11,7 +11,7 @@ link_failure_rate = 0.0\n link_recovery_rate = 1.0\n controller_crash_rate = 0.0\n controller_recovery_rate = 1.0\n-traffic_generation_rate = 0.10\n+traffic_generation_rate = 0.35\n host_migration_rate = 0.0\n intracontroller_block_rate = 0.0\n intracontroller_unblock_rate = 0.0\ndiff --git a/config/trace_pox_l2_consistency.py b/config/trace_pox_l2_consistency.py\nindex 1a39921..9dfcab6 100644\n--- a/config/trace_pox_l2_consistency.py\n+++ b/config/trace_pox_l2_consistency.py\n@@ -9,21 +9,23 @@ from sts.happensbefore.hb_logger import HappensBeforeLogger\n \n \n \n-consistent = True\n+consistent = False\n+barriers= True\n+\n # Use POX as our controller\n start_cmd = ('''./pox.py --verbose '''\n              ''' forwarding.consistency --consistent=%s --deny=False '''\n-             ''' --update_wait=10 --update_once=True --consistent_sleep=10 '''\n-             ''' openflow.of_01 --address=__address__ --port=__port__ ''' % consistent)\n+             ''' --update_wait=10 --update_once=True --consistent_sleep=5 --barriers=%s '''\n+             ''' openflow.of_01 --address=__address__ --port=__port__ ''' % (consistent, barriers))\n \n controllers = [ControllerConfig(start_cmd, cwd=\"pox/\")]\n \n-steps = 300\n+steps = 100\n topology_class = ConsistencyTopology\n topology_params = \"\"\n \n # Where should the output files be written to\n-results_dir = \"traces/trace_pox_hb_%s-%s-steps%d\" % (topology_class.__name__, consistent, steps)\n+results_dir = \"traces/trace_pox_%s-%s-%s-steps%d\" % (topology_class.__name__, consistent, barriers, steps)\n \n apps = None\n \ndiff --git a/pox b/pox\nindex c7d2bb3..a7a0bab 160000\n--- a/pox\n+++ b/pox\n@@ -1 +1 @@\n-Subproject commit c7d2bb3bb9262925c716ccaf90be3628974f4bd8\n+Subproject commit a7a0bab1388a0ff4d1cd729fd395f10ae749af79-dirty",
      "status": "On branch hb\nYour branch is up-to-date with 'origin/hb'.\nChanges not staged for commit:\n  (use \"git add <file>...\" to update what will be committed)\n  (use \"git checkout -- <file>...\" to discard changes in working directory)\n  (commit or discard the untracked or modified content in submodules)\n\n\tmodified:   config/fuzzer_params.py\n\tmodified:   config/trace_pox_l2_consistency.py\n\tmodified:   pox (new commits, modified content, untracked content)\n\nUntracked files:\n  (use \"git add <file>...\" to include in what will be committed)\n\n\tconfig/pox_consistency.py\n\tconfig/trace_onos_hb_learningswitch.py\n\tgen.sh~\n\nno changes added to commit (use \"git add\" and/or \"git commit -a\")"
    }
  },
  "sys": {
    "lsb_release": "Ubuntu 15.04",
    "uname": "Linux stsdev 3.19.0-26-generic #28-Ubuntu SMP Tue Aug 11 14:16:32 UTC 2015 x86_64 x86_64 x86_64 GNU/Linux"
  },
  "timestamp": "2015_09_20_14_24_25",
  "user": "ahassany"
}
