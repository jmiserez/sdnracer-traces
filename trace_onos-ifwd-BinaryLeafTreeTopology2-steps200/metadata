{
  "additional_metadata": null,
  "argv": [
    "./simulator.py",
    "-L",
    "logging.cfg",
    "-c",
    "config/onos.py"
  ],
  "cwd": "/home/jeremie/mscthesis/jmiserez/sts",
  "host": {
    "cpu_info": "Intel(R) Core(TM) i7-2720QM CPU @ 2.20GHz",
    "free": "total       used       free     shared    buffers     cached\nMem:      16310124   15624452     685672     134092     102608    6387680\n-/+ buffers/cache:    9134164    7175960\nSwap:     16650236     321988   16328248",
    "name": "espresso",
    "num_cores": "8",
    "uptime": "22:57:33 up 3 days, 11:00, 12 users,  load average: 1.66, 1.27, 1.15"
  },
  "modules": {
    "hassel": {
      "branch": "HEAD",
      "commit": "31afb29fa66783f5a66765bc186509b65ffc023e",
      "diff": "",
      "status": "HEAD detached at 31afb29\nnothing to commit, working directory clean"
    },
    "pox": {
      "branch": "hb",
      "commit": "85cf31dba661265ad8d63f79e9f92fb55d12f383",
      "diff": "",
      "status": "On branch hb\nYour branch is up-to-date with 'origin/hb'.\n\nnothing to commit, working directory clean"
    },
    "sts": {
      "branch": "hb",
      "commit": "9befee853347aec286a0bde913160276a04da4fd",
      "diff": "diff --git a/config/onos.py b/config/onos.py\nindex 929f4d7..309abda 100644\n--- a/config/onos.py\n+++ b/config/onos.py\n@@ -6,7 +6,6 @@ from sts.control_flow.interactive import Interactive\n from sts.input_traces.input_logger import InputLogger\n from sts.simulation_state import SimulationConfig\n from sts.happensbefore.hb_logger import HappensBeforeLogger\n-from config.application_events import AppCircuitPusher\n \n \n \n@@ -16,14 +15,14 @@ start_cmd = '''tail -f \"/home/jeremie/Applications/apache-karaf-3.0.3/data/log/k\n controllers = [ControllerConfig(start_cmd, controller_type='logfile', cwd='./')]\n \n num = 2\n-topology_class = StarTopology\n-topology_params = \"num_hosts=%d\" % num\n+# topology_class = StarTopology\n+# topology_params = \"num_hosts=%d\" % num\n # topology_class = MeshTopology\n # topology_params = \"num_switches=%d\" % num\n # topology_class = GridTopology\n # topology_params = \"num_rows=3, num_columns=3\"\n-# topology_class = BinaryLeafTreeTopology\n-# topology_params = \"num_levels=%d\" % num\n+topology_class = BinaryLeafTreeTopology\n+topology_params = \"num_levels=%d\" % num\n \n steps = 200\n results_dir = \"traces/trace_onos-ifwd-%s%d-steps%s\" % (topology_class.__name__, num, steps)\ndiff --git a/config/trace_floodlight_firewall.py b/config/trace_floodlight_firewall.py\nindex dfafeed..0d0f8b5 100644\n--- a/config/trace_floodlight_firewall.py\n+++ b/config/trace_floodlight_firewall.py\n@@ -18,7 +18,7 @@ controllers = [ControllerConfig(start_cmd, cwd='../floodlight', address=\"127.0.0\n # start_cmd = '''echo \"no-op\"'''\n # controllers = [ControllerConfig(start_cmd, cwd='../floodlight', address=\"127.0.0.1\", port=6633, controller_type='dummy')]\n \n-num = 1\n+num = 2\n # topology_class = StarTopology\n # topology_params = \"num_hosts=%d\" % num\n # topology_class = MeshTopology\ndiff --git a/config/trace_floodlight_loadbalancer.py b/config/trace_floodlight_loadbalancer.py\nindex 0827332..3be7790 100644\n--- a/config/trace_floodlight_loadbalancer.py\n+++ b/config/trace_floodlight_loadbalancer.py\n@@ -19,14 +19,14 @@ controllers = [ControllerConfig(start_cmd, cwd='../floodlight', address=\"127.0.0\n # controllers = [ControllerConfig(start_cmd, cwd='../floodlight', address=\"127.0.0.1\", port=6633, controller_type='dummy')]\n \n num = 2\n-topology_class = StarTopology\n-topology_params = \"num_hosts=%d\" % num\n-#topology_class = MeshTopology\n-#topology_params = \"num_switches=%d\" % num\n+# topology_class = StarTopology\n+# topology_params = \"num_hosts=%d\" % num\n+# topology_class = MeshTopology\n+# topology_params = \"num_switches=%d\" % num\n # topology_class = GridTopology\n # topology_params = \"num_rows=3, num_columns=3\"\n-# topology_class = BinaryLeafTreeTopology\n-# topology_params = \"num_levels=%d\" % num\n+topology_class = BinaryLeafTreeTopology\n+topology_params = \"num_levels=%d\" % num\n \n steps = 200\n results_dir = \"traces/trace_floodlight_loadbalancer-%s%d-steps%s\" % (topology_class.__name__, num, steps)\ndiff --git a/sts/happensbefore/hb_logger.py b/sts/happensbefore/hb_logger.py\nindex 1328571..748dd6f 100644\n--- a/sts/happensbefore/hb_logger.py\n+++ b/sts/happensbefore/hb_logger.py\n@@ -71,6 +71,9 @@ class HappensBeforeLogger(EventMixin):\n     self.controller_packetin_mid_out_to_HbControllerHandle = dict() # mid_out -> HbControllerHandle\n     self.controller_packetin_mid_out_to_temporary_tag = dict() # mid_out -> HbControllerHandle\n     \n+    self.decoded_msg_to_rxbase64 = dict()\n+    self.decoded_line_msg = dict()\n+    \n     prefixThreadOutputMatcher.add_string_to_match(self.controller_hb_msg_in)\n     prefixThreadOutputMatcher.add_string_to_match(self.controller_hb_msg_out)\n     prefixThreadOutputMatcher.addListener(PrefixThreadLineMatch, self.handle_no_exceptions)\n@@ -578,7 +581,15 @@ class HappensBeforeLogger(EventMixin):\n     '''\n     timestamp, mid_out, msg = unmatched_entry #tuple\n     # TODO(jm): performance: do not decode every time we do the comparison, only decode once\n-    if self.compare_msg(msg, base64_decode_openflow(line_msg)):\n+    \n+    # TODO(jm): hack: we add caching to to this, but it really should be done somewhere else\n+    if line_msg in self.decoded_line_msg:\n+      decoded_line_msg = self.decoded_line_msg[line_msg]\n+    else:\n+      decoded_line_msg = base64_decode_openflow(line_msg)\n+      self.decoded_line_msg[line_msg] = decoded_line_msg\n+    \n+    if self.compare_msg(msg, decoded_line_msg):\n       self.controller_packetin_to_mid_out[(dpid,line_msg)] = mid_out\n       temporary_tag = self.mids.generate_unused_tag()\n       event = HbControllerHandle(mid_out, temporary_tag)\n@@ -598,7 +609,20 @@ class HappensBeforeLogger(EventMixin):\n     timestamp, mid_in, msg = unmatched_entry #tuple\n     # TODO(jm): performance: do not decode every time we do the comparison, only decode once\n     # TODO(jm): performance: do not fetch rxbase64 every time, only do it once\n-    if self.compare_msg(base64_decode_openflow(self._get_rxbase64(msg)), base64_decode_openflow(line_msg)):\n+    \n+    # TODO(jm): hack: we add caching to to this, but it really should be done somewhere else\n+    if msg in self.decoded_msg_to_rxbase64:\n+      decoded_msg = self.decoded_msg_to_rxbase64[msg]\n+    else:\n+      decoded_msg = base64_decode_openflow(self._get_rxbase64(msg))\n+      self.decoded_msg_to_rxbase64[msg] = decoded_msg\n+    if line_msg in self.decoded_line_msg:\n+      decoded_line_msg = self.decoded_line_msg[line_msg]\n+    else:\n+      decoded_line_msg = base64_decode_openflow(line_msg)\n+      self.decoded_line_msg[line_msg] = decoded_line_msg\n+    \n+    if self.compare_msg(decoded_msg, decoded_line_msg):\n       first_event = self.controller_packetin_mid_out_to_HbControllerHandle[mid_out]\n       temporary_tag = self.controller_packetin_mid_out_to_temporary_tag[mid_out]\n       second_event = HbControllerSend(temporary_tag, mid_in)\n@@ -660,6 +684,7 @@ class HappensBeforeLogger(EventMixin):\n                 # we know this message, and an edge was added\n #                 print \"====> MATCHED: age: {} - {}: {}\".format(str(time.time()-unmatched_entry[0]), out_dpid, str(unmatched_entry[2]))\n                 self.unmatched_HbMessageHandle[out_dpid].remove(unmatched_entry) # okay as we exit the loop now\n+                self.in_match_controller_line_call = False\n                 return True\n       return False\n \ndiff --git a/sts/util/procutils.py b/sts/util/procutils.py\nindex 5e13613..53cd546 100644\n--- a/sts/util/procutils.py\n+++ b/sts/util/procutils.py\n@@ -139,8 +139,11 @@ def _prefix_thread(f, func):\n       prefixThreadOutputMatcher.match_line(line)\n       if not line:\n         break\n-      with printlock:\n-        print func(line)\n+#       with printlock:\n+#         print func(line)\n+      # NOTE(jm): The printlock caused hangs with ONOS. This seems to \"work\". \n+      #           see: https://stackoverflow.com/questions/3029816/how-do-i-get-a-thread-safe-print-in-python-2-6\n+      sys.stdout.write(str(func(line))+'\\n')\n     try:\n       sys.stderr.write(\"Closing fd %d\\n\" % f)\n       f.close() # idempotent, in case the f.closed broke out of the while loop",
      "status": "On branch hb\nYour branch is up-to-date with 'origin/hb'.\n\nChanges not staged for commit:\n  (use \"git add <file>...\" to update what will be committed)\n  (use \"git checkout -- <file>...\" to discard changes in working directory)\n\n\tmodified:   config/onos.py\n\tmodified:   config/trace_floodlight_firewall.py\n\tmodified:   config/trace_floodlight_loadbalancer.py\n\tmodified:   sts/happensbefore/hb_logger.py\n\tmodified:   sts/util/procutils.py\n\nUntracked files:\n  (use \"git add <file>...\" to include in what will be committed)\n\n\tall_traces_add_outputs_to_git.sh~\n\tgen.sh~\n\nno changes added to commit (use \"git add\" and/or \"git commit -a\")"
    }
  },
  "sys": {
    "lsb_release": "Ubuntu 14.04.3 LTS",
    "uname": "Linux espresso 3.13.0-67-generic #110-Ubuntu SMP Fri Oct 23 13:24:41 UTC 2015 x86_64 x86_64 x86_64 GNU/Linux"
  },
  "timestamp": "2015_11_13_22_57_33",
  "user": "jeremie"
}
