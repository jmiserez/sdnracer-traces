{
  "additional_metadata": null,
  "argv": [
    "./simulator.py",
    "-c",
    "config/trace_pox_reactive_consistency.py"
  ],
  "cwd": "/home/ahassany/repos/jsts",
  "host": {
    "cpu_info": "Intel(R) Core(TM) i7-4870HQ CPU @ 2.50GHz",
    "free": "total       used       free     shared    buffers     cached\nMem:       4045244     555616    3489628       5664      39580     396188\n-/+ buffers/cache:     119848    3925396\nSwap:      4192252          0    4192252",
    "name": "stsdev",
    "num_cores": "2",
    "uptime": "15:47:03 up 2 days,  9:10,  1 user,  load average: 0.08, 0.03, 0.05"
  },
  "modules": {
    "hassel": {
      "branch": "HEAD",
      "commit": "31afb29fa66783f5a66765bc186509b65ffc023e",
      "diff": "",
      "status": "HEAD detached at 31afb29\nnothing to commit, working directory clean"
    },
    "pox": {
      "branch": "hb",
      "commit": "8484b5772c319947acfc421ce7c6c66445779f9e",
      "diff": "",
      "status": "On branch hb\nYour branch is up-to-date with 'origin/hb'.\nUntracked files:\n  (use \"git add <file>...\" to include in what will be committed)\n\n\tpox/forwarding/l2_multi_new.py\n\nnothing added to commit but untracked files present (use \"git add\" to track)"
    },
    "sts": {
      "branch": "hb",
      "commit": "9ffe9e1f2b7d149be5e6cdc47332ca702ad7a607",
      "diff": "diff --git a/config/fuzzer_params.py b/config/fuzzer_params.py\nindex 9c29ae3..1807a9a 100644\n--- a/config/fuzzer_params.py\n+++ b/config/fuzzer_params.py\n@@ -11,7 +11,7 @@ link_failure_rate = 0.0\n link_recovery_rate = 1.0\n controller_crash_rate = 0.0\n controller_recovery_rate = 1.0\n-traffic_generation_rate = 0.1\n+traffic_generation_rate = 0.10\n host_migration_rate = 0.0\n intracontroller_block_rate = 0.0\n intracontroller_unblock_rate = 0.0\ndiff --git a/config/trace_pox_l2_consistency.py b/config/trace_pox_l2_consistency.py\nindex a88fbe1..1a39921 100644\n--- a/config/trace_pox_l2_consistency.py\n+++ b/config/trace_pox_l2_consistency.py\n@@ -9,16 +9,16 @@ from sts.happensbefore.hb_logger import HappensBeforeLogger\n \n \n \n-consistent = False\n+consistent = True\n # Use POX as our controller\n start_cmd = ('''./pox.py --verbose '''\n              ''' forwarding.consistency --consistent=%s --deny=False '''\n-             ''' --update_wait=10 --update_once=True --consistent_sleep=5 '''\n+             ''' --update_wait=10 --update_once=True --consistent_sleep=10 '''\n              ''' openflow.of_01 --address=__address__ --port=__port__ ''' % consistent)\n \n controllers = [ControllerConfig(start_cmd, cwd=\"pox/\")]\n \n-steps = 200\n+steps = 300\n topology_class = ConsistencyTopology\n topology_params = \"\"\n \ndiff --git a/config/trace_pox_l2_multi.py b/config/trace_pox_l2_multi.py\nindex 4358d56..96a914c 100644\n--- a/config/trace_pox_l2_multi.py\n+++ b/config/trace_pox_l2_multi.py\n@@ -2,11 +2,9 @@ from config.experiment_config_lib import ControllerConfig\n from sts.topology import StarTopology, BufferedPatchPanel, MeshTopology, GridTopology, BinaryLeafTreeTopology\n from sts.controller_manager import UserSpaceControllerPatchPanel\n from sts.control_flow.fuzzer import Fuzzer\n-from sts.control_flow.interactive import Interactive\n from sts.input_traces.input_logger import InputLogger\n from sts.simulation_state import SimulationConfig\n from sts.happensbefore.hb_logger import HappensBeforeLogger\n-from config.application_events import AppCircuitPusher\n \n \n \n@@ -17,15 +15,19 @@ start_cmd = ('''./pox.py --verbose '''\n \n controllers = [ControllerConfig(start_cmd, cwd=\"pox/\")]\n \n+num = 2\n topology_class = StarTopology\n topology_params = \"num_hosts=3\"\n-# topology_class = MeshTopology\n-# topology_params = \"num_switches=6\"\n+topology_class = MeshTopology\n+topology_params = \"num_switches=%d\" % num\n # topology_class = GridTopology\n # topology_params = \"num_rows=3, num_columns=3\"\n+#topology_class = BinaryLeafTreeTopology\n+#topology_params = \"num_levels=%d\" % num\n \n+steps = 100\n # Where should the output files be written to\n-results_dir = \"experiments/dbg\"\n+results_dir = \"traces/trace_pox_l2_multi-%s%d-steps%s\" % (topology_class.__name__, num, steps)\n \n apps = None\n \n@@ -53,9 +55,11 @@ control_flow = Fuzzer(simulation_config,\n                       input_logger=InputLogger(),\n                       initialization_rounds=20,\n                       send_all_to_all=False,\n-                      check_interval=1,\n+                      check_interval=10,\n                       delay=0.1,\n                       halt_on_violation=True,\n+                      send_init_packets=False,\n+                      steps=100,\n #                       invariant_check_name=\"check_everything\",\n                       invariant_check_name=\"InvariantChecker.check_liveness\",\n                       apps=apps)\n\\ No newline at end of file\ndiff --git a/pox b/pox\n--- a/pox\n+++ b/pox\n@@ -1 +1 @@\n-Subproject commit 8484b5772c319947acfc421ce7c6c66445779f9e\n+Subproject commit 8484b5772c319947acfc421ce7c6c66445779f9e-dirty\ndiff --git a/sts/happensbefore/hb_graph.py b/sts/happensbefore/hb_graph.py\nindex ced193d..b274261 100755\n--- a/sts/happensbefore/hb_graph.py\n+++ b/sts/happensbefore/hb_graph.py\n@@ -219,6 +219,7 @@ class HappensBeforeGraph(object):\n         self.events_before_next_barrier[event.dpid].append(event)\n         \n   def _rule_04_barrier_post(self, event):\n+    return\n     if event.type == 'HbMessageHandle':\n       if event.msg_type_str == \"OFPT_BARRIER_REQUEST\":\n         self.most_recent_barrier[event.dpid] = event\n@@ -472,7 +473,10 @@ class HappensBeforeGraph(object):\n   def store_graph(self, filename=\"hb.dot\",  print_packets=False, print_only_racing=False, print_only_harmful=False):\n     if self.results_dir is not None:\n       filename = os.path.join(self.results_dir,filename)\n-    \n+\n+    self.prep_draw(self.g, print_packets)\n+    nx.write_dot(self.g, os.path.join(self.results_dir, \"g.dot\"))\n+\n     interesting_msg_types = ['OFPT_PACKET_IN',\n                             'OFPT_FLOW_REMOVED',\n                             'OFPT_PACKET_OUT',\n@@ -656,7 +660,12 @@ class HappensBeforeGraph(object):\n     eids = self.host_sends.keys()\n     eids = sorted(eids)\n     for eid in eids:\n-      nodes = nx.dfs_preorder_nodes(g, eid)\n+      nodes = list(nx.dfs_preorder_nodes(g, eid))\n+      # Remove other HostSends\n+      for node in nodes:\n+        if eid != node and isinstance(g.node[node]['event'], HbHostSend):\n+          pass\n+          #nodes.remove(node)\n       subg = nx.DiGraph(g.subgraph(nodes), host_send=g.node[eid]['event'])\n       traces.append(subg)\n     for i in range(len(traces)):\n@@ -664,8 +673,8 @@ class HappensBeforeGraph(object):\n       for src, dst, data in subg.edges(data=True):\n         if data['rel'] in ['time', 'race']:\n           subg.remove_edge(src, dst)\n-        elif isinstance(subg.node[src]['event'], HbHostHandle):\n-          subg.remove_edge(src, dst)\n+        #elif isinstance(subg.node[src]['event'], HbHostHandle):\n+        #  subg.remove_edge(src, dst)\n       # Remove disconnected subgraph\n       host_send = subg.graph['host_send']\n       nodes = nx.dfs_preorder_nodes(subg, host_send.eid)\n@@ -697,7 +706,7 @@ class HappensBeforeGraph(object):\n       if bidir:\n         self.g.add_edge(race.k_event.eid, race.i_event.eid, attr_dict=props)\n \n-  def get_racing_events(self, trace):\n+  def get_racing_events(self, trace, ignore_other_traces=True):\n     \"\"\"\n     For a given packet trace, return all the races that races with its events\n     \"\"\"\n@@ -712,6 +721,22 @@ class HappensBeforeGraph(object):\n     # will get us the other event that has been part of the race\n     races = [race for race in self.race_detector.races_harmful\n              if race.i_event.eid in racing or race.k_event.eid in racing]\n+    if ignore_other_traces:\n+      # We don't care about write on the packet trace that races with reads\n+      # on other packet traces. The other traces will be reported anyway.\n+      to_remove = []\n+      for race in races:\n+        if trace.has_node(race.i_event.eid):\n+          mine = race.i_event\n+          other = race.k_event\n+        else:\n+          mine = race.k_event\n+          other = race.i_event\n+        if isinstance(mine, HbMessageHandle) and isinstance(other, HbPacketHandle):\n+          to_remove.append(race)\n+          print \"REMOVED\", race\n+      for i in to_remove:\n+        races.remove(i)\n     return races\n \n   def find_inconsistent(self):\n@@ -719,8 +744,9 @@ class HappensBeforeGraph(object):\n     Finds all the races related each packet trace\n     \"\"\"\n     races = []\n+    just_first = False\n     for trace in self.packet_traces:\n-      tmp = self.get_racing_events(trace)\n+      tmp = self.get_racing_events(trace, True)\n       if not tmp:\n         continue\n       if len(tmp) == 1:\n@@ -728,11 +754,12 @@ class HappensBeforeGraph(object):\n         if trace.has_edge(send.eid, tmp[0].i_event.eid) or\\\n             trace.has_edge(send.eid, tmp[0].k_event.eid):\n           print \"Ignoring race for on the first switch: for %s->%s\" % (str(send.packet.src), str(send.packet.dst))\n-          continue\n-      races.append((trace, tmp))\n+          just_first = True\n+          #continue\n+      races.append((trace, tmp, just_first))\n     return races\n \n-  def print_racing_packet_trace(self, result_dir, trace, races):\n+  def print_racing_packet_trace(self, result_dir, trace, races, just_first=False):\n     \"\"\"\n     first is the trace\n     second is the list of races\n@@ -749,7 +776,11 @@ class HappensBeforeGraph(object):\n     self.prep_draw(g, TraceSwitchPacketUpdateBegin)\n     src = str(host_send.packet.src)\n     dst = str(host_send.packet.dst)\n-    name = \"/%s/race_%s_%s_%d.dot\" % (result_dir, src, dst, host_send.eid)\n+    if just_first:\n+      rtype = 'ignore'\n+    else:\n+      rtype = 'race'\n+    name = \"/%s/%s_%s_%s_%d.dot\" % (result_dir, rtype, src, dst, host_send.eid)\n     print \"Storing packet inconsistency for %s->%s in %s \" % (src, dst, name)\n     nx.write_dot(g, name)\n \n@@ -836,8 +867,8 @@ class Main(object):\n     self.graph.store_traces(self.results_dir)\n     t5 = time.time()\n     packet_races = self.graph.find_inconsistent()\n-    for trace, races in packet_races:\n-      self.graph.print_racing_packet_trace(self.results_dir, trace, races)\n+    for trace, races, just_first in packet_races:\n+      self.graph.print_racing_packet_trace(self.results_dir, trace, races, just_first)\n     self.graph.find_inconsistent_updates()\n     t6 = time.time()\n \ndiff --git a/sts/happensbefore/hb_race_detector.py b/sts/happensbefore/hb_race_detector.py\nindex 24e1d3f..24cd705 100644\n--- a/sts/happensbefore/hb_race_detector.py\n+++ b/sts/happensbefore/hb_race_detector.py\n@@ -244,6 +244,7 @@ class RaceDetector(object):\n     self.total_races = self.total_harmful + self.total_commute\n \n   def print_races(self):\n+    #\"\"\"\n     for race in self.races_commute:\n       print \"+-------------------------------------------+\"\n       print \"| Commuting ({}):     {:>4} <---> {:>4}      |\".format(race.rtype, race.i_event.eid, race.k_event.eid)\n@@ -273,6 +274,7 @@ class RaceDetector(object):\n       print \"| {:>4}: {:28} (read) |\".format(ev[0].eid, ev[0].type)\n     for ev in self.write_operations:\n       print \"| {:>4}: {:27} (write) |\".format(ev[0].eid, ev[0].type)\n+    #\"\"\"\n     print \"| Total operations:      {:<18} |\".format(self.total_operations)\n     print \"|-------------------------------------------|\"\n     print \"| Total commuting races: {:<18} |\".format(self.total_commute)\ndiff --git a/sts/traffic_generator.py b/sts/traffic_generator.py\nindex d71ad58..5308785 100644\n--- a/sts/traffic_generator.py\n+++ b/sts/traffic_generator.py\n@@ -22,6 +22,10 @@ from util.convenience import random_eth_addr, random_ip_addr\n from sts.dataplane_traces.trace import DataplaneEvent\n import random\n \n+from itertools import count\n+\n+PING_SEQ = count()\n+\n class TrafficGenerator (object):\n   '''\n   Generate sensible randomly generated (openflow) events\n@@ -68,9 +72,13 @@ class TrafficGenerator (object):\n     #else:\n     #  ping.type = random.choice([TYPE_ECHO_REQUEST, TYPE_ECHO_REPLY])\n     ping.type = TYPE_ECHO_REQUEST\n+    payload = echo()\n+    payload.seq = PING_SEQ.next()\n     if payload_content == \"\" or payload_content is None:\n       payload_content = \"Ping\" * 12\n-    ping.payload = payload_content\n+    #ping.payload = payload_content\n+    payload.content = payload_content\n+    ping.payload = payload\n     i.payload = ping\n     e.payload = i\n     return e",
      "status": "On branch hb\nYour branch is up-to-date with 'origin/hb'.\nChanges not staged for commit:\n  (use \"git add <file>...\" to update what will be committed)\n  (use \"git checkout -- <file>...\" to discard changes in working directory)\n  (commit or discard the untracked or modified content in submodules)\n\n\tmodified:   config/fuzzer_params.py\n\tmodified:   config/trace_pox_l2_consistency.py\n\tmodified:   config/trace_pox_l2_multi.py\n\tmodified:   pox (untracked content)\n\tmodified:   sts/happensbefore/hb_graph.py\n\tmodified:   sts/happensbefore/hb_race_detector.py\n\tmodified:   sts/traffic_generator.py\n\nUntracked files:\n  (use \"git add <file>...\" to include in what will be committed)\n\n\tconfig/pox_consistency.py\n\tconfig/trace_onos_hb_learningswitch.py\n\tconfig/trace_pox_reactive_consistency.py\n\tgen.sh\n\tgen.sh~\n\nno changes added to commit (use \"git add\" and/or \"git commit -a\")"
    }
  },
  "sys": {
    "lsb_release": "Ubuntu 15.04",
    "uname": "Linux stsdev 3.19.0-26-generic #28-Ubuntu SMP Tue Aug 11 14:16:32 UTC 2015 x86_64 x86_64 x86_64 GNU/Linux"
  },
  "timestamp": "2015_09_16_15_47_03",
  "user": "ahassany"
}
